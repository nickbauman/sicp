#Sun Dec 09 21:15:48 CST 2012
cmdhistory=["()" "'()" "(find-doc \\"eq\\")" "(eq 1 1)" "(\= 1 1)" "(\= 1 2 3)" "(\= 1 1 2)" "(conj (list 1 2 3) (list 9 10))" "(into (list 1 2 3) (list 9 10))" "(find-doc \\"print\\")" "(find-doc \\"error\\")" ";; Switching to huffman namespace" "(decode sample-message sample-tree)" "(doc cons)" ";; Switching to huffman namespace" "(decode sample-message sample-tree)" "sample-tree" "(decode sample-message sample-tree)" ";; Switching to huffman namespace" "(decode sample-tree sample-message)" ";; Switching to huffman namespace" "(decode sample-message sample-tree)" ";; Switching to huffman namespace" "sample-tree" "(ffirst sample-tree)" "(first sample-tree)" ";; Switching to huffman namespace" "(decode sample-message sample-tree)" "(keyword \\"d\\")" "(val \:d)" "(value \:d)" "(first \:d)" "(name \:d)" "(apply name (list \:d \:f))" "(apply string (map name (list \:d \:f)))" "(apply str (map name (list \:d \:f)))" "(decode sample-message sample-tree)" "sample-message" "(decode sample-message sample-tree)" "    \\n             \\n(println \\"decoded-seq\:\\" (apply str (map name (decode sample-message sample-tree)))" "(println \\"decoded-seq\:\\" (apply str (map name (decode sample-message sample-tree))))" "(doc cons)" "(A D A B B C A)" "(println \\"decoded-seq\:\\" (apply str (map name (decode sample-message sample-tree))))" "(set 'A' 'A' 'b')" "(doc set)" "(seq \\"foo\\")" "(doc reduce)" "(set (seq \\"abldhsldhsldjejshashdkjh\\"))" "(def gamut (set (seq \\"dpfjwpfnwpvnsjbndsonjcvkscnisd\\")))" "gamut" "(def plaintext \\"dpfjwpfnwpvnsjbndsonjcvkscnisd\\")" "(def gamut (set (seq plaintext)))" "gamut" "((seq plaintext) 4)" "((list plaintext) 4)" "(nth plaintext 4)" "plaintext" "(map \#(\= (nth plaintext %) 'k') (range (count plaintext)))" "(type 'k')" "(type \\\\k)" "(map \#(\= (nth plaintext %) \\\\k) (range (count plaintext)))" "(keep \#(\= (nth plaintext %) \\\\k) (range (count plaintext)))" "(some \#(\= (nth plaintext %) \\\\k) (range (count plaintext)))" "(reduce (fn[x y] (println \\"x\\" x \\"y\\" y)) gamut plaintext)" "plaintext" "(reduce (fn[x y] (println \\"x\\" x \\"y\\" y)) [gamut plaintext])" "(keep \#(\= (nth plaintext %) \\\\k) (range (count plaintext)))" "(every \#(\= (nth plaintext %) \\\\k) (range (count plaintext)))" "(every? \#(\= (nth plaintext %) \\\\k) (range (count plaintext)))" "(keep \#(if (\= (nth plaintext %) \\\\k) true) (range (count plaintext)))" "(keep \#(if (\= (nth plaintext %) \\\\j) true) (range (count plaintext)))" "(count (keep \#(if (\= (nth plaintext %) \\\\j) true) (range (count plaintext))))" "(map (fn[ch] (count (keep (fn[x] (if (\= (nth plaintext x) ch) true) (range (count plaintext))))) gamut))" " (map (fn[ch] (count (keep (fn[x] (if (\= (nth plaintext x) ch) true) (range (count plaintext)))))) gamut)" "(map (fn[ch] (count (keep (fn[x] (if (\= (nth plaintext x) ch) true)) (range (count plaintext))))) gamut)" "(interleave gamut (map (fn[ch] (count (keep (fn[x] (if (\= (nth plaintext x) ch) true)) (range (count plaintext))))) gamut))" "(partition 2 (interleave gamut (map (fn[ch] (count (keep (fn[x] (if (\= (nth plaintext x) ch) true)) (range (count plaintext))))) gamut)))" ";; Switching to huffman namespace" "(gen-frequency-pairs \\"abc\\")" "(gen-frequency-pairs \\"abckdlshjfoshflshvfloshvoshdshdshyds\\")" "(gen-frequency-pairs \\"abb\\")" "sample-tree" "(first sample-tree)" "(second sample-tree)" "(rest (second sample-tree))" "(last (second sample-tree))" "sample-tree" "(map right-branch sample-tree)" "(right-branch sample-tree)" "(right-branch (rest sample-tree))" "(keep right-branch sample-tree)" "(map left-branch sample-tree)" "(make-leaf-set (gen-frequency-pairs \\"I love you my dear\\"))" "(make-leaf-set (gen-frequency-pairs \\"abc\\"))" "(make-leaf-set (gen-frequency-pairs \\"I love you my dear\\"))" "(doc trampoline)" "(make-leaf-set (gen-frequency-pairs \\"I love you my dear\\"))" "(make-leaf-set (gen-frequency-pairs \\"a\\"))" "(doc trampoline)" "(gen-frequency-pairs \\"djkshflshlshfkshfklshfdkshdiefnuifuedjnjfndsicnu3289fb983f2hbv\\")" "(left-branch sample-tree)" "(right-branch sample-tree)" "(right-branch (right-branch sample-tree))" "(right-branch (right-branch (right-branch sample-tree)))" "(weight (right-branch (right-branch sample-tree)))" "(right-branch (right-branch sample-tree))" "(weight (right-branch (right-branch (right-branch sample-tree))))" "(weight-leaf (right-branch (right-branch (right-branch sample-tree))))" "(decode sample-message sample-tree)" ";; Switching to huffman namespace" "(decode sample-message sample-tree)" "sample-tree" "(symbol \:a)" "(name \:a)" "(make-leaf-set (gen-frequency-pairs \\"akdlask\\"))" "(esymbols sample-tree)" "(nth sample-tree 2)" "(nth sample-tree 1)" "sample-tree" "(nth sample-tree 0)" "(right-branch sample-tree)" "(left-branch sample-tree)" "(nth (right-branch sample-tree))" "(nth (right-branch sample-tree) 3)" "(leaf? (right-branch sample-tree))" "(nth (right-branch sample-tree) 2)" "(weight (right-branch sample-tree))" "(esymbol (right-branch sample-tree))" "(esymbols (right-branch sample-tree))" "(esymbols (right-branch (right-branch sample-tree))\\n          )" "(weight (right-branch (right-branch sample-tree)))" "(weight sample-tree)" "(esymbols (right-branch (right-branch (right-branch sample-tree))))" ";; Switching to huffman namespace" "(list \:a \:c \:b)" "((list \:a \:c \:b) \:a)" "(\:a (list \:a \:c \:b))" "(contains? (list \:a \:c \:b) \:a)" "(keep \#(\= \:a %) (list \:a \:c \:b))" "(some \#(\= \:a %) (list \:a \:c \:b))" "(encode-esymbol \:A sample-tree)" "(encode-esymbol \:D sample-tree)" "(decode sample-message sample-tree)" "(apply encode-esymbol (decode sample-message sample-tree))" "(map (partial encode-esymbol sample-tree) (decode sample-message sample-tree))" "(flatten (map (partial encode-esymbol sample-tree) (decode sample-message sample-tree)))" "sample-message" "(flatten (map (partial encode-esymbol sample-tree) (decode sample-message sample-tree)))" "sample-message" "(encode (\:A \:D \:A \:B \:B \:C \:A) sample-tree)" "(encode (list \:A \:D \:A \:B \:B \:C \:A) sample-tree)" "sample-message" "(encode (list \:A \:D \:A \:B \:X) sample-tree)" "(doc conj)" "(conj 1 (list 1 2 3 4))" "(conj (list 1 2 3 4) 1)" "(cons (list 1 2 3 4) 1)" "(cons 1 (list 1 2 3 4))" "(doc cons)" "(doc conj)" "(concat 1 (list 1 2 3 4))" "(concat (seq 1) (list 1 2 3 4))" "(concat (list 1) (list 1 2 3))" "(doc mapcat)" "(mapcat identity (1 2 3) (\:a \:b \:c))" "(mapcat identity '(1 2 3) '(\:a \:b \:c))" "(mapcat (fn[x y] (identity x) (identity y)) '(1 2 3) '(\:a \:b \:c))" "(doc mapcat)" "(encode (decode sample-message sample-tree) sample-tree)" "sample-message" "(encode (decode sample-message sample-tree) sample-tree)" "(doc symbols)" "(decode sample-message sample-tree)" ";; Switching to huffman namespace" "(decode sample-message sample-tree)" "(encode [\:A \:D \:A \:B \:B \:C \:A] sample-tree)" "sample-message" "(decode (encode [\:A \:D \:A \:B \:B \:C \:A] sample-tree) sample-tree)" "(doc juxt)" " (decode (encode [\:A \:D \:A \:B \:B \:C \:A] sample-tree) sample-tree)" "(gen-frequency-pairs \\"abc\\")" "(gen-frequency-pairs \\"djsljflsjfjsk\\")" "(type {})" "(doc .toChars)" "(.toChars \\"skdj\\")" "(chars \\"jd\\")" "(.toCharArray \\"jdk\\")" ";; Switching to huffman namespace" "(gen-frequency-pairs \\"abc\\")" "(gen-frequency-pairs \\"akfdjslfhslkbfnkdsajkdnkljksajhdkjdshkjsahdksd\\")" "(reduce + [1 2])" "(reduce + [] [1 2])" "(reduce (fn[x y] (println \\"x\\" x \\"y\\" y)) [] [1 2])" "(reduce (fn[x y] (println \\"x\\" x \\"y\\" y)) [] [1 2 3])" "(reduce (fn[coll y] (into coll (+ y (last coll))) coll) [] [1 2 3])" "(reduce (fn[coll y] (into coll (+ y (if (empty? coll) 0 (last coll))))) [] [1 2 3])" "(reduce (fn[coll y] (into coll (+ y (if (empty? coll) 0 (last coll))) coll) [] [1 2 3]))" "(gen-frequency-pairs \\"abbc\\")" "(gen-frequency-pairs \\"jfidosjfidosjfosdjfidsjfodsjfsdjfjsodjfdsoijf\\")" "(seq (gen-frequency-pairs \\"jfidosjfidosjfosdjfidsjfodsjfsdjfjsodjfdsoijf\\"))" "(doc assoc-in)" "(gen-frequency-pairs \\"jfidosjfidosjfosdjfidsjfodsjfsdjfjsodjfdsoijf\\")" ";; Switching to max-mean-power namespace" "(max-avg-intervals [1 2 3 4 3 2  3 4 5 6 4 3])" "(max-avg-intervals [1 2 3])" ";; Switching to huffman namespace" "(endcode [\:A \:D \:A \:D \:C \:B])" "(encode [\:A \:D \:A \:D \:C \:B])" "(encode [\:A \:D \:A \:D \:C \:B] sample-tree)" "(decode (encode [\:A \:D \:A \:D \:C \:B] sample-tree) sample-tree)" "(gen-frequency-pairs \\"ajdkahdkshslkdhskfhskfghslofhksfhdkldfhdfkdhfkdh\\")" "(set (seq \\"ajdkahdkshslkdhskfhskfghslofhksfhdkldfhdfkdhfkdh\\"))" "(decode (encode [\:A \:D \:A \:D \:C \:B] sample-tree) sample-tree)" "(encode [\:A \:D \:A \:D \:C \:B] sample-tree)" "(gen-frequency-pairs \\"kdkldfisjopdnifniosdhiujvcdsio\\")" "(into () (gen-frequency-pairs \\"kdkldfisjopdnifniosdhiujvcdsio\\"))" "([1 2 3] 1)" "([1 2 3] 5)" "([1 2 3] 0)" "({\:a 2 \:b 3 \:c 4} \:c)" "({\:a 2 \:b 3 \:c 4} \:z)" "(nth (fn[x] (+ x 1)) 0)" "(nth '(fn[x] (+ x 1)) 0)" ";; Switching to huffman namespace" "(make-leaf-set (gen-frequency-pairs \\"adkdkskjhfd\\"))" "(make-leaf-set (gen-frequency-pairs \\"abcc\\"))" " (make-leaf-set (gen-frequency-pairs \\"abcc\\"))" "(gen-frequency-pairs \\"abcc\\")" "(make-leaf-set (gen-frequency-pairs \\"abcc\\"))" ";; Switching to huffman namespace" "(gen-frequency-pairs \\"abckdl\\")" "(gen-frequency-pairs \\"fjdkjfklsfjdklsjfdklsfjkls\\")" "(gen-frequency-pairs \\"ldjkslfjksl\\")" "(gen-frequency-pairs \\"dkdljs\\")" ";; Switching to huffman namespace" "(gen-frequency-pairs \\"dklfjkdlfjdklsfjdlsfjkldsjfkldsjflf\\")" "(encode '(\:A \:B \:C \:B \:D))" "(encode '(\:A \:B \:C \:B \:D) sample-tree)" "(decode '(0 1 0 1 1 1 1 0 1 1 0) sample-tree)" "(make-leaf-set (gen-frequency-pairs \\"kdfjdkfkdjfkjdfjk\\"))" "sample-tree" "(right-branch sample-tree)" "(left-branch sample-tree)" "(right-branch (right-branch (right-branch sample-tree)))" " (right-branch (right-branch (right-branch (right-branch sample-tree))))" "sample-tree" "(def g [1 2 3 4 5 6 7])" "g" "(first g)" "(rest g)" "(butlast g)" "(cons g g)" "(cons 0 g)" "(conj 0 g)" "(conj g 0)" "(def g (cons 0 g))" "g" "(def g (conj g 0 ))" "g" ";; Switching to huffman namespace" "(make-leaf-set (gen-frequency-pairs \\"kdkdhslkfjs\\"))" "(make-leaf-set (gen-frequency-pairs \\"kdk\\"))" "(right-branch (make-leaf-set (gen-frequency-pairs \\"kdk\\")))" "(left-branch (make-leaf-set (gen-frequency-pairs \\"kdk\\")))" "(make-leaf-set (gen-frequency-pairs \\"kdk\\"))" "sample-tree" "(right-branch (right-branch sample-tree))" "(right-branch (left-branch sample-tree))" "(reverse sample-tree)" "\\nsample-tree" "(right-branch sample-tree)" "(left-branch (right-branch sample-tree)\\n             \\n          )" ";; Switching to huffman namespace" "(doc frequencies)" "(frequencies \\"akdlsjdljs\\")" "(source frequencies)" "(doc line-seq)"]
eclipse.preferences.version=1
